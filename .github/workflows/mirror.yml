name: Mirror Artifacts

on:
  workflow_dispatch:
    inputs:
      urls:
        description: 'URLs to download (space-separated)'
        required: true
      artifact_names:
        description: 'Artifact names (space-separated, same order as URLs)'
        required: true
      custom_headers:
        description: 'Custom global headers (space-separated, tips use quotes)'
        required: false
      generate_signature:
        description: 'Generate checksums (SHA256, SHA512, MD5) for downloaded files? (true/false)'
        required: false
        default: 'true'

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Parse input
        id: parse_inputs
        run: |
          urls=(${{ inputs.urls }})
          artifact_names=(${{ inputs.artifact_names }})
          
          if [[ "${#urls[@]}" -ne "${#artifact_names[@]}" ]]; then
            echo "Error: The number of URLs must equal to the number of artifact names."
            exit 1
          fi

          # Validate URLs (support all aria2 protocols)
          #HTTP/HTTPS, FTP, SFTP, BitTorrent/Magnet and Metalink
          supported_protocols=(http https ftp sftp metalink) # Process `magnet` differently
          valid_protocol=false
          for url in "${urls[@]}"; do
            for protocol in "${supported_protocols[@]}"; do
              if [[ "$url" =~ ^$protocol:// ]]; then
                valid_protocol=true
                break
              fi
            done
            if ! $valid_protocol; then
              if ! [[ "$url" =~ ^magnet:\?* ]]; then # If it's also not a magnet links
                echo "Error: Invalid URL protocol: $url. Supported protocols: ${supported_protocols[@]}, magnet."
                exit 1
              fi
            fi
          done

          # Validate artifact names (disallow invalid characters)
          invalid_chars='\/:*?"<>|'
          for name in "${artifact_names[@]}"; do
            if [[ "$name" =~ [$invalid_chars] ]]; then
              echo "Error: Invalid characters in artifact name: $name. Disallowed characters: '$invalid_chars'."
              exit 1
            fi
          done

          # Validate custom headers (optional, basic check)
          headers=(${{ inputs.custom_headers }})
          if [[ -n "${headers[@]}" ]]; then
            for header in "${headers[@]}"; do
              if [[ ! "$header" =~ : ]]; then  # Check if not contains a colon
                echo "Error: Invalid header format: $header. Must contain a colon."
                exit 1
              fi
            done
          fi

      - name: Set matrix
        id: set-matrix
        run: |
          urls=(${{ inputs.urls }})
          artifact_names=(${{ inputs.artifact_names }})

          matrix='{"include": ['
          for i in "${!urls[@]}"; do
            matrix+="{\"index\": $i, \"url\": \"${urls[$i]}\", \"artifact_name\": \"${artifact_names[$i]}\"},"
          done
          matrix="${matrix%,}" # Remove trailing comma
          matrix+=']}'

          echo "matrix=$matrix" | tee --append $GITHUB_OUTPUT

  mirror:
    needs: generate_matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate_matrix.outputs.matrix) }}
    env:
      URL: ${{ matrix.url }}
      ARTIFACT_NAME: ${{ matrix.artifact_name }}
      GENERATE_SIGNATURE: ${{ inputs.generate_signature }}
    steps:
      - name: Install aria2
        run: sudo apt-get update && sudo apt-get install -y aria2

      - name: Download file
        run: |
          aria2c_command="aria2c -x16 -s1024"

          headers=(${{ inputs.custom_headers }})
          if [[ -n "${headers[@]}" ]]; then
            for header in "${headers[@]}"; do
              aria2c_command+=" --header='$header'"
            done
          fi
          aria2c_command+=" '$URL' -o '$ARTIFACT_NAME'"

          echo "Executing: $aria2c_command"
          eval "$aria2c_command"

      - name: Generate checksums (optional)
        if: env.GENERATE_SIGNATURE == 'true'
        run: |
          sha256sum "$ARTIFACT_NAME" | tee "$ARTIFACT_NAME.sha256"
          sha512sum "$ARTIFACT_NAME" | tee "$ARTIFACT_NAME.sha512"
          md5sum "$ARTIFACT_NAME" | tee "$ARTIFACT_NAME.md5"

      - name: Verify downloaded file
        run: |
          if [ ! -f "$ARTIFACT_NAME" ]; then
            echo "Download failed for $ARTIFACT_NAME"
            exit 1
          fi
          ls -al "$ARTIFACT_NAME"

      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}
            ${{ matrix.artifact_name }}.*
